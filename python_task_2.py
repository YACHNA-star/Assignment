# -*- coding: utf-8 -*-
"""python_task_2.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Asq8_EvDMygM8_Cx5Atco8mIecuu4Gl
"""

import pandas as pd

def calculate_distance_matrix(df)->pd.DataFrame():
    """
    Calculate a distance matrix based on the dataframe, df.

    Args:
        df (pandas.DataFrame)

    Returns:
        pandas.DataFrame: Distance matrix
    """
    # Read dataset-3.csv as a DataFrame
    data = pd.read_csv(df)

    # Creating a dictionary to store cumulative distances between toll booths
    cumulative_distances = {}

    # Iterating through each row in the DataFrame
    for _, row in data.iterrows():
        # Extracting toll booth names and distances
        booth_a, booth_b, distance = row['id_start'], row['id_end'], row['distance']

        # Updating cumulative distances for A to B and B to A routes
        if booth_a not in cumulative_distances:
            cumulative_distances[booth_a] = {}
        if booth_b not in cumulative_distances:
            cumulative_distances[booth_b] = {}

        cumulative_distances[booth_a][booth_b] = distance
        cumulative_distances[booth_b][booth_a] = distance

    # Calculating cumulative distances using the transitive property
    for k in cumulative_distances:
        for i in cumulative_distances[k]:
            for j in cumulative_distances[k]:
                if i != j and i in cumulative_distances and j in cumulative_distances[i]:
                    if cumulative_distances[i][j] == 0:
                        cumulative_distances[i][j] = cumulative_distances[i][k] + cumulative_distances[k][j]

    # Converting the dictionary to a DataFrame
    distance_matrix = pd.DataFrame(cumulative_distances).fillna(0)

    # Setting diagonal values to 0
    for i in range(min(distance_matrix.shape)):
        distance_matrix.iloc[i, i] = 0

    return distance_matrix

# Example usage:
# Replace 'dataset-3.csv' with the appropriate path to your CSV file
url='https://raw.githubusercontent.com/mapup/MapUp-Data-Assessment-F/main/datasets/dataset-3.csv'
result_distance_matrix = calculate_distance_matrix(url)
print(result_distance_matrix)

def unroll_distance_matrix(input_df)->pd.DataFrame():
    """
    Unroll a distance matrix to a DataFrame with 'id_start', 'id_end', and 'distance' columns.

    Args:
        input_df (pandas.DataFrame): Input DataFrame containing distance matrix.

    Returns:
        pandas.DataFrame: Unrolled DataFrame with columns 'id_start', 'id_end', and 'distance'.
    """
    # Create an empty list to store unrolled data
    unrolled_data = []

    # Iterate through rows and columns to unroll the distance matrix
    for id_start in input_df.index:
        for id_end in input_df.columns:
            if id_start != id_end:
                unrolled_data.append({'id_start': id_start, 'id_end': id_end, 'distance': input_df.loc[id_start, id_end]})

    # Create a DataFrame from the unrolled data
    unrolled_df = pd.DataFrame(unrolled_data)

    return unrolled_df

# Example usage:
# Replace 'result_df_from_question1' with your DataFrame from Question 1
result_df = calculate_distance_matrix(url)

# Call the function with the DataFrame
df = unroll_distance_matrix(result_df)
print(df)

def find_ids_within_ten_percentage_threshold(input_df, reference_id)->pd.DataFrame():
    """
    Find all IDs whose average distance lies within 10% of the average distance of the reference ID.

    Args:
        df (pandas.DataFrame)
        reference_id (int)

    Returns:
        pandas.DataFrame: DataFrame with IDs whose average distance is within the specified percentage threshold
                          of the reference ID's average distance.
    """
    # Write your logic here

    # Calculate the average distance for the reference ID
    reference_avg_distance = input_df[input_df['id_start'] == reference_id]['distance'].mean()

    # Calculate the lower and upper threshold values (10% below and above the reference average distance)
    lower_threshold = reference_avg_distance - (reference_avg_distance * 0.10)
    upper_threshold = reference_avg_distance + (reference_avg_distance * 0.10)

    # Filter IDs within the threshold range
    ids_within_threshold = input_df[(input_df['id_start'] != reference_id) &
                                    (input_df['distance'] >= lower_threshold) &
                                    (input_df['distance'] <= upper_threshold)]['id_start'].unique()

    # Sort and return the list of IDs within the threshold
    return sorted(ids_within_threshold)

# Replace 'result_df_from_question2' with your DataFrame from Question 2
df = calculate_distance_matrix(url)
result_df =  unroll_distance_matrix(df)
result_df_from_task2 = result_df
  # Get a random 'id_start' value as the reference ID
reference_value = result_df_from_task2['id_start'].sample(n=1).iloc[0]

# Call the function with the DataFrame and reference ID
ids_within_threshold = find_ids_within_ten_percentage_threshold(result_df_from_task2,reference_value)
print(ids_within_threshold)

   # return df

def calculate_toll_rate(df)->pd.DataFrame():
    """
    Calculate toll rates for each vehicle type based on the unrolled DataFrame.

    Args:
        df (pandas.DataFrame)

    Returns:
        pandas.DataFrame
    """
    # Wrie your logic here


    # Define rate coefficients for different vehicle types
    rate_coefficients = {'moto': 0.8, 'car': 1.2, 'rv': 1.5, 'bus': 2.2, 'truck': 3.6}

    # Calculate toll rates for each vehicle type based on distance and rate coefficients
    for vehicle, rate in rate_coefficients.items():
        df[vehicle] = df['distance'] * rate

    return df

# Example usage:
# Replace 'result_df_from_question2' with your DataFrame from Question 2
df = calculate_distance_matrix(url)
result_df =  unroll_distance_matrix(df)
result_df_from_task2 = result_df

# Call the function with the DataFrame
result_with_toll_rates = calculate_toll_rate(result_df_from_task2)
print(result_with_toll_rates)

from datetime import datetime, timedelta
def calculate_time_based_toll_rates(input_df):
    """
    Calculate time-based toll rates for different time intervals within a day.

    Args:
        df (pandas.DataFrame)

    Returns:
        pandas.DataFrame
    """
    # Write your logic here